{"version":3,"sources":["../../api/test/orders_test.js"],"names":["process","env","NODE_ENV","chai","use","chaiHttp","expect","require","describe","it","done","request","server","get","end","err","res","to","have","status","be","json","body","an","order","name","quantity","price","post","send","property","id","updateOrder","put","deleteData","delete"],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\r\n//Require the dev-dependencies\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../src/app';\r\n// chai.should();\r\nchai.use(chaiHttp);\r\nconst expect = require('chai').expect;\r\n\r\ndescribe('/Get all Orders Endpoint Tests', () => {\r\n  it(`Fetch All Orders on /api/v1/orders GET `, done => {\r\n    chai\r\n      .request(server)\r\n      .get('/api/v1/orders')\r\n      .end((err, res) => {\r\n        expect(res).to.have.status(200);\r\n        expect(res).to.be.json;\r\n        expect(res.body).to.be.an('object');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  // Test to add a single order\r\n  it('should ADD a SINGLE order api/v1/orders/ POST', done => {\r\n    let order = {\r\n      name: 'wheat',\r\n      quantity: 5,\r\n      price: 'small'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .post('api/v1/orders')\r\n      .send(order)\r\n      .end((err, res) => {\r\n        expect(200);\r\n        expect(res.body).to.be.an('object');\r\n        expect(order).to.have.property('name');\r\n        expect(order).to.have.property('price');\r\n        expect(order).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  // Test to get single meal record\r\n  it('should get a SINGLE order on api/v1/orders/:id GET', done => {\r\n    const order = {\r\n      id: 1,\r\n      name: 'rice',\r\n      price: 300,\r\n      quantity: 'large'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .get(`api/v1/orders/${order.id}`)\r\n      .end((err, res) => {\r\n        expect(200);\r\n        expect(res.body).to.be.an('object');\r\n        expect(order).to.have.property('name');\r\n        expect(order).to.have.property('price');\r\n        expect(order).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  it('should UPDATE a SINGLE order api/v1/orders/:id PUT', done => {\r\n    const updateOrder = {\r\n      id: 1,\r\n      name: 'rice',\r\n      price: 400,\r\n      quantity: 'small'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .put(`api/v1/orders/${updateOrder.id}`)\r\n      .end((err, res) => {\r\n        expect(201);\r\n        expect(res.body).to.be.an('object');\r\n        expect(updateOrder).to.have.property('name');\r\n        expect(updateOrder).to.have.property('price');\r\n        expect(updateOrder).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  it('should DELETE a SINGLE order api/v1/orders/:id DELETE', done => {\r\n    const deleteData = {\r\n      id: 3,\r\n      name: 'rice',\r\n      price: 400,\r\n      quantity: 'small'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .delete(`api/v1/orders/${deleteData.id}`)\r\n      .end((err, res) => {\r\n        expect(201);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n"],"file":"orders_test.js"}