{"version":3,"sources":["../../api/test/meals_test.js"],"names":["process","env","NODE_ENV","chai","use","chaiHttp","expect","require","describe","it","done","request","server","get","end","err","res","to","have","status","be","json","body","an","meal","name","quantity","price","post","send","property","singleMeal","id","updateData","put","delete"],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\r\n//Require the dev-dependencies\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../src/app';\r\n// chai.should();\r\nchai.use(chaiHttp);\r\nconst expect = require('chai').expect;\r\n\r\ndescribe('/Get all Meals Endpoint Tests', () => {\r\n  it(`Fetch All Meals on /api/v1 meals GET `, done => {\r\n    chai\r\n      .request(server)\r\n      .get('/api/v1/meals')\r\n      .end((err, res) => {\r\n        expect(res).to.have.status(200);\r\n        expect(res).to.be.json;\r\n        expect(res.body).to.be.an('object');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  // Test to add a single meal\r\n  it('should ADD a SINGLE meal api/v1/meals/ POST', done => {\r\n    let meal = {\r\n      name: 'wheat',\r\n      quantity: 5,\r\n      price: 580\r\n    };\r\n    chai\r\n      .request(server)\r\n      .post('api/v1/meals')\r\n      .send(meal)\r\n      .end((err, res) => {\r\n        expect(200);\r\n        expect(res.body).to.be.an('object');\r\n        expect(meal).to.have.property('name');\r\n        expect(meal).to.have.property('price');\r\n        expect(meal).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  // Test to get single meal record\r\n  it('should get a SINGLE meal on api/v1/meals/:id GET', done => {\r\n    const singleMeal = {\r\n      id: 1,\r\n      name: 'rice',\r\n      price: 300,\r\n      quantity: 3\r\n    };\r\n    chai\r\n      .request(server)\r\n      .get(`api/v1/meals/${singleMeal.id}`)\r\n      .end((err, res) => {\r\n        expect(200);\r\n        expect(res.body).to.be.an('object');\r\n        expect(singleMeal).to.have.property('name');\r\n        expect(singleMeal).to.have.property('price');\r\n        expect(singleMeal).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  it('should UPDATE a SINGLE meal api/v1/meals/:id PUT', done => {\r\n    const updateData = {\r\n      id: 1,\r\n      name: 'rice',\r\n      price: 400,\r\n      quantity: 'small'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .put(`api/v1/meals/${updateData.id}`)\r\n      .end((err, res) => {\r\n        expect(201);\r\n        expect(res.body).to.be.an('object');\r\n        expect(updateData).to.have.property('name');\r\n        expect(updateData).to.have.property('price');\r\n        expect(updateData).to.have.property('quantity');\r\n        done(err);\r\n      });\r\n  });\r\n\r\n  it('should DELETE a SINGLE meal api/v1/meals/:id DELETE', done => {\r\n    const updateData = {\r\n      id: 3,\r\n      name: 'rice',\r\n      price: 400,\r\n      quantity: 'small'\r\n    };\r\n    chai\r\n      .request(server)\r\n      .delete(`api/v1/meals/${updateData.id}`)\r\n      .end((err, res) => {\r\n        expect(201);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n"],"file":"meals_test.js"}