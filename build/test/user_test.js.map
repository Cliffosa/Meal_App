{"version":3,"sources":["../../api/test/user_test.js"],"names":["process","env","NODE_ENV","assert","chai","expect","use","chaiHttp","PREFIX","login_details","email","password","register_details","name","phone","before","done","describe","it","request","server","post","send","then","res","to","have","status","equal","body","catch","err","console","log","message","after","User","destroy","where"],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../src/app';\r\nimport User from '../src/models/user';\r\nconst { assert, expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst PREFIX = '/api/v1';\r\n\r\nlet login_details = {\r\n  email: `ford@gmail.com`,\r\n  password: `123@abc`\r\n};\r\n\r\nlet register_details = {\r\n  name: `Rexford`,\r\n  email: `ford@gmail.com`,\r\n  phone: `07060538862`,\r\n  password: `123@abc`\r\n};\r\n\r\nbefore(done => {\r\n  done();\r\n});\r\n\r\ndescribe('User Auth Signup Endpoint Tests', () => {\r\n  it('POST /auth/signup - User Can Sign Up', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`${PREFIX}/auth/signup`)\r\n      .send({\r\n        register_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(201);\r\n        assert.equal(res.body.status, 'success');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/signup', err.message));\r\n  });\r\n\r\n  it(\"POST /auth/signup - User Can't signup again with the same email\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`${PREFIX}/auth/signup`)\r\n      .send({\r\n        name: `Rexford`,\r\n        email: `ford@gmail.com`,\r\n        phone: `07060538862`,\r\n        password: `123@abc`\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/signup', err.message));\r\n  });\r\n});\r\n\r\ndescribe('User Auth Login Endpoint Tests', () => {\r\n  it('POST /auth/login - User Cannot Login without being registered', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`${PREFIX}/auth/login`)\r\n      .send({\r\n        login_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n\r\n  it('POST /auth/login - User Can Login', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`${PREFIX}/auth/login`)\r\n      .send({\r\n        login_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(200);\r\n        assert.equal(res.body.status, 'success');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n  it(\"POST /auth/login - User Can't login with incorrect password\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`${PREFIX}/auth/login`)\r\n      .send({\r\n        email: 'ford@gmail.com',\r\n        password: 'password111'\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n});\r\n\r\nafter(done => {\r\n  User.destroy({ where: { email: 'roger@test.com' } }).then(() => {\r\n    done();\r\n  });\r\n});\r\n"],"file":"user_test.js"}