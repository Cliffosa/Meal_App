{"version":3,"sources":["../../api/test/user_test.js"],"names":["process","env","NODE_ENV","assert","chai","expect","use","chaiHttp","login_details","email","password","before","done","describe","it","request","server","post","send","name","phone","then","res","to","have","status","equal","body","catch","err","console","log","message","after","User","destroy","where"],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../src/app';\r\nimport User from '../src/models/user';\r\nconst { assert, expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nlet login_details = {\r\n  email: `ford@gmail.com`,\r\n  password: `123@abc`\r\n};\r\n\r\n// let register_details = {\r\n//   name: `Rexford`,\r\n//   email: `ford@gmail.com`,\r\n//   phone: `07060538862`,\r\n//   password: `123@abc`\r\n// };\r\n\r\nbefore(done => {\r\n  done();\r\n});\r\n\r\ndescribe('User Auth Signup Endpoint Tests', () => {\r\n  it('POST /auth/signup - User Can Sign Up', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/signup`)\r\n      .send({\r\n        name: `Rexford`,\r\n        email: `ford@gmail.com`,\r\n        phone: `07060538862`,\r\n        password: `123@abc`\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(201);\r\n        assert.equal(res.body.status, 'success');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/signup', err.message));\r\n  });\r\n\r\n  it(\"POST /auth/signup - User Can't signup again with the same email\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/signup`)\r\n      .send({\r\n        name: `Rexford`,\r\n        email: `ford@gmail.com`,\r\n        phone: `07060538862`,\r\n        password: `123@abc`\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/signup', err.message));\r\n  });\r\n});\r\n\r\ndescribe('User Auth Login Endpoint Tests', () => {\r\n  it('POST /auth/login - User Cannot Login without being registered', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/login`)\r\n      .send({\r\n        login_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n\r\n  it('POST /auth/login - User Can Login', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/login`)\r\n      .send({\r\n        login_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(200);\r\n        assert.equal(res.body.status, 'success');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n  it(\"POST /auth/login - User Can't login with incorrect password\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/login`)\r\n      .send({\r\n        email: 'ford@gmail.com',\r\n        password: 'password111'\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/login', err.message));\r\n  });\r\n});\r\n\r\nafter(done => {\r\n  User.destroy({ where: { email: 'roger@test.com' } }).then(() => {\r\n    done();\r\n  });\r\n});\r\n"],"file":"user_test.js"}