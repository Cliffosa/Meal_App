{"version":3,"sources":["../../api/test/admin_test.js"],"names":["process","env","NODE_ENV","assert","chai","expect","use","chaiHttp","login_details","email","password","register_details","name","phone","beforeEach","done","describe","it","request","server","post","send","then","res","to","have","status","body","be","an","json","catch","err","console","log","message","equal","after","Admin","destroy","where"],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport server from '../src/app';\r\nimport Admin from '../src/models/admin';\r\nconst { assert, expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nlet login_details = {\r\n  email: `admin@gmail.com`,\r\n  password: `123@abc`\r\n};\r\n\r\nlet register_details = {\r\n  name: `Rexford`,\r\n  email: `ford@email.com`,\r\n  phone: `07060538862`,\r\n  password: `123@abc`\r\n};\r\n\r\nbeforeEach(done => {\r\n  done();\r\n});\r\n\r\ndescribe('Admin Auth Signup Tests', () => {\r\n  it('POST /auth/admin/signup - Admin Can Sign Up', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/admin/signup`)\r\n      .send({\r\n        register_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(201);\r\n        expect(res.body).to.have.status('success');\r\n        expect(res.body).to.be.an('object');\r\n        expect(res).to.be.json;\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/admin/signup', err.message));\r\n  });\r\n\r\n  it(\"POST /auth/admin/signup - Admin Can't signup again with the existing email\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/admin/signup`)\r\n      .send({\r\n        register_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body).status('error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/admin/signup', err.message));\r\n  });\r\n});\r\n\r\ndescribe('Admin Can Login Endpoint Tests', () => {\r\n  it('POST /auth/admin/login - Admin Cannot Login without first registered', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/admin/login`)\r\n      .send({\r\n        email: 'thisis@science.com',\r\n        password: 'password'\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/admin/login', err.message));\r\n  });\r\n  it('POST /auth/admin/login - Admin Can Login', done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/admin/login`)\r\n      .send({\r\n        login_details\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(200);\r\n        assert.equal(res.body.status, 'success');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/admin/login', err.message));\r\n  });\r\n  it(\"POST /auth/admin/login - Admin Can't login with invalid password\", done => {\r\n    chai\r\n      .request(server)\r\n      .post(`/api/v1/auth/admin/login`)\r\n      .send({\r\n        email: 'ford@gmail.com',\r\n        password: 'password111'\r\n      })\r\n      .then(res => {\r\n        expect(res).to.have.status(500);\r\n        assert.equal(res.body.status, 'error');\r\n        done();\r\n      })\r\n      .catch(err => console.log('POST /auth/admin/login', err.message));\r\n  });\r\n});\r\n\r\nafter(done => {\r\n  Admin.destroy({ where: { email: 'roger@test.com' } }).then(() => {\r\n    done();\r\n  });\r\n});\r\n"],"file":"admin_test.js"}