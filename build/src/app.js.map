{"version":3,"sources":["../../api/src/app.js"],"names":["app","use","bodyParser","json","urlencoded","extended","router","get","req","res","status","send","message","PORT","process","env","User","hasMany","Order","constraints","onDelete","OrderItem","belongsTo","Admin","Meal","Menu","sequelize","sync","then","listen","console","log","emit","catch","err","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,oBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQK,cAAR;AAEAN,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO;AADmB,GAArB,CAAP;AAGD,CAJD;AAMA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,C,CAEA;;AACAG,cAAKC,OAAL,CAAaC,eAAb,EAAoB;AAAEC,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAApB;;AACAJ,cAAKC,OAAL,CAAaI,mBAAb,EAAwB;AAAEF,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAxB;;AACAF,gBAAMI,SAAN,CAAgBC,cAAhB,EAAuB;AAAEJ,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAvB;;AACAI,eAAKF,SAAL,CAAeC,cAAf,EAAsB;AAAEJ,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAtB;;AACAK,cAAKH,SAAL,CAAeC,cAAf,EAAsB;AAAEJ,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAAtB;;AACAC,oBAAUC,SAAV,CAAoBE,cAApB,EAA0B;AAAEL,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAA1B;;AAEAM,YACGC,IADH,GAEGC,IAFH,CAEQ,YAAM;AACV5B,EAAAA,GAAG,CAAC6B,MAAJ,CAAWhB,IAAX,EAAiB,YAAM;AACrBiB,IAAAA,OAAO,CAACC,GAAR,iCAAqClB,IAArC;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA/B,IAAAA,GAAG,CAACgC,IAAJ,CAAS,aAAT;AACD,GAJD;AAKD,CARH,EASGC,KATH,CASS,UAAAC,GAAG,EAAI;AACZJ,EAAAA,OAAO,CAACK,KAAR,CAAc,oCAAd,EAAoDD,GAApD;AACD,CAXH;;eAaelC,G","sourcesContent":["import '@babel/polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport router from '../src/routes/index';\r\nimport cors from 'cors';\r\nimport sequelize from './util/db';\r\nimport { config } from 'dotenv';\r\nimport User from './models/user';\r\nimport Admin from './models/admin';\r\nimport Meal from './models/meals';\r\nimport Menu from './models/menu';\r\nimport Order from './models/orders';\r\nimport OrderItem from './models/orderItems';\r\n\r\nconfig();\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cors());\r\napp.use(router);\r\n\r\napp.get('/', (req, res) => {\r\n  return res.status(200).send({\r\n    message: `Welcome To Book-A-Meal-App Book-A-Meal is an application that allows customers to make food orders and helps the foodvendor know what the customers want to eat.`\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 8000;\r\n\r\n// relationship\r\nUser.hasMany(Order, { constraints: true, onDelete: 'CASCADE' });\r\nUser.hasMany(OrderItem, { constraints: true, onDelete: 'CASCADE' });\r\nOrder.belongsTo(Admin, { constraints: true, onDelete: 'CASCADE' });\r\nMeal.belongsTo(Admin, { constraints: true, onDelete: 'CASCADE' });\r\nMenu.belongsTo(Admin, { constraints: true, onDelete: 'CASCADE' });\r\nOrderItem.belongsTo(Meal, { constraints: true, onDelete: 'CASCADE' });\r\n\r\nsequelize\r\n  .sync()\r\n  .then(() => {\r\n    app.listen(PORT, () => {\r\n      console.log(`App listening to port ${PORT}`);\r\n      console.log('Connection has been established successfully.');\r\n      app.emit('dbConnected');\r\n    });\r\n  })\r\n  .catch(err => {\r\n    console.error('Unable to connect to the database:', err);\r\n  });\r\n\r\nexport default app;\r\n"],"file":"app.js"}