{"version":3,"sources":["../../../api/src/controllers/orderController.js"],"names":["OrderController","req","res","body","mealId","quantity","OrderItem","findOne","where","userId","user","id","orderItem","result","status","message","create","newOrderItem","createdOrder","json","Order","findAll","adminId","admin","orders","fetchData","orderId","params","action","include","Meal","meal","Error","name","update","destroy","flase","orderItems","meals","total","map","orderMeal","push","resultOrder","price","order","admins","Set","add","ordersController","reduceQuantity","createOrders","delivery_address","then","dbMeal","Menu","menu","menuMeals","JSON","parse","updatedMenuMeals","menuMeal","updatedMenuMeal","stringify","shift","length","decreaseQuantity","adminTotal","adminMeals","filter","adminMeal","OrdersController"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\r\nimport OrderItem from '../models/orderItems';\r\nimport Meal from '../models/meals';\r\nimport Menu from '../models/menu';\r\n\r\nclass OrderController {\r\n  async addMealToOder(req, res) {\r\n    try {\r\n      const { mealId, quantity } = req.body;\r\n      const orderItem = await OrderItem.findOne({ where: { mealId, userId: req.user.id } });\r\n      const result = {};\r\n      // check order exist\r\n      if (orderItem) {\r\n        result.body = {\r\n          status: false,\r\n          message: 'Orders Already Exist!!!'\r\n        };\r\n      } else {\r\n        // create new order\r\n        const newOrderItem = await OrderItem.create({ mealId, quantity, userId: req.user.id });\r\n        result.body = {\r\n          status: true,\r\n          message: 'Order Sucessfully Added!',\r\n          createdOrder: newOrderItem\r\n        };\r\n      }\r\n      return res.status(201).json(result.body);\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error creating order',\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async getOrders(req, res) {\r\n    try {\r\n      const orders = await Order.findAll({ where: { adminId: req.admin.id } });\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Orders Retrieved Successfully!',\r\n        fetchData: orders\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error fetching orders',\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateOrder(req, res) {\r\n    try {\r\n      const { orderId } = req.params;\r\n      const { action } = req.body;\r\n      const orderItem = await OrderItem.findOne({\r\n        where: { id: orderId, userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      if (action === 'increase') {\r\n        orderItem.quantity++;\r\n        if (orderItem.quantity > orderItem.meal.quantity) {\r\n          throw new Error(\r\n            `We only have ${orderItem.meal.quantity} of ${orderItem.meal.name} is available`\r\n          );\r\n        }\r\n        OrderItem.update(\r\n          {\r\n            quantity: orderItem.quantity\r\n          },\r\n          { where: { id: orderItem.id } }\r\n        );\r\n      } else if (action === 'decrease') {\r\n        orderItem.quantity--;\r\n        if (orderItem.quantity === 0) {\r\n          OrderItem.destroy({ where: { id: orderItem.id } });\r\n        } else {\r\n          OrderItem.update({ quantity: orderItem.quantity }, { where: { id: orderItem.id } });\r\n        }\r\n      } else if (action === 'delete') {\r\n        OrderItem.destroy({ where: { id: orderItem.id } });\r\n      }\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Order Updated Successfully'\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: flase,\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async getOrderItems(req, res) {\r\n    try {\r\n      const orderItems = await OrderItem.findAll({\r\n        where: { userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      if (!orderItems) {\r\n        throw new Error('No order for this user!');\r\n      }\r\n      const meals = [];\r\n      let total = 0;\r\n      orderItems.map(orderItem => {\r\n        //@todo forEach\r\n        const orderMeal = { ...orderItem };\r\n        orderMeal.meal.quantity = orderItem.quantity;\r\n        meals.push(orderMeal.meal);\r\n        let resultOrder = orderItem.quantity * orderMeal.meal.price;\r\n        total += resultOrder;\r\n      });\r\n      const order = { meals, total };\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Orders Retrieved Successfully',\r\n        fetchData: order\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error fetching order',\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async checkoutOrder(req, res) {\r\n    try {\r\n      const orderItems = await OrderItem.findAll({\r\n        where: { userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      const meals = [];\r\n      const admins = new Set();\r\n      orderItems.map(orderItem => {\r\n        //@todo forEach\r\n        const orderMeal = { ...orderItem };\r\n        orderMeal.meal.quantity = orderItem.quantity;\r\n        meals.push(orderMeal.meal);\r\n        admins.add(orderMeal.meal.adminId);\r\n      });\r\n      ordersController.reduceQuantity(meals);\r\n      await OrderItem.destroy({ where: { userId: req.user.id } });\r\n      ordersController.createOrders(admins, meals, req.body.delivery_address, req.user.id);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Order Made'\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async decreaseQuantity(meals) {\r\n    try {\r\n      const meal = meals[0];\r\n      await Meal.findOne({ where: { id: meal.id } })\r\n        .then(dbMeal => {\r\n          return dbMeal.update(\r\n            { quantity: dbMeal.quantity - meal.quantity },\r\n            { where: { id: meal.id } }\r\n          );\r\n        })\r\n        .then(() => {\r\n          return Menu.findOne({ where: { adminId: meal.adminId } });\r\n        })\r\n        .then(menu => {\r\n          const menuMeals = JSON.parse(menu.meals);\r\n          const updatedMenuMeals = menuMeals.map(menuMeal => {\r\n            const updatedMenuMeal = { ...menuMeal };\r\n            if (menuMeal.id === meal.id) {\r\n              updatedMenuMeal.quantity -= meal.quantity;\r\n            }\r\n            return updatedMenuMeal;\r\n          });\r\n          return menu.update(\r\n            { meals: JSON.stringify(updatedMenuMeals) },\r\n            { where: { id: menu.id } }\r\n          );\r\n        })\r\n        .then(() => {\r\n          meals.shift();\r\n          if (meals.length !== 0) {\r\n            ordersController.decreaseQuantity(meals);\r\n          } else {\r\n            return true;\r\n          }\r\n        });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  async createOrder(admins, meals, delivery_address, userId) {\r\n    try {\r\n      admins.map(admin => {\r\n        let adminTotal = 0;\r\n        const adminMeals = meals.filter(meal => meal.adminId === admin);\r\n        adminMeals.map(adminMeal => {\r\n          adminTotal += adminMeal.quantity * adminMeal.price;\r\n        });\r\n        Order.create({\r\n          order: JSON.stringify(adminMeals),\r\n          total: adminTotal,\r\n          delivery_address: delivery_address,\r\n          adminId: admin,\r\n          userId,\r\n          status: 0\r\n        });\r\n      });\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n}\r\n\r\nconst OrdersController = new OrderController();\r\nexport default OrdersController;\r\n"],"file":"orderController.js"}