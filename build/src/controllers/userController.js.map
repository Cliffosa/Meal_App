{"version":3,"sources":["../../../api/src/controllers/userController.js"],"names":["UsersController","req","res","body","name","email","phone","password","User","findOne","where","existUser","Error","bcrypt","hash","create","user","ordinaryUser","id","ONE_WEEK","jwt","sign","secret","expiresIn","jwtTokenkey","status","json","message","token","compare","result","UserController"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport User from '../models/user';\r\nimport secret from '../util/jwt';\r\n\r\nclass UsersController {\r\n  async registerUser(req, res) {\r\n    try {\r\n      const { name, email, phone, password } = req.body;\r\n      const existUser = await User.findOne({ where: { email } });\r\n      //check if user exist\r\n      if (existUser) {\r\n        throw new Error('User with that email Already exist');\r\n      }\r\n      const hash = await bcrypt.hash(password, 8);\r\n      //pass the hashed password\r\n      const user = await User.create({ name, email, phone, password: hash });\r\n      //declare user without password\r\n      const ordinaryUser = {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone\r\n      };\r\n\r\n      //create token and its expiration\r\n      const ONE_WEEK = 60 * 60 * 24 * 7;\r\n      const jwtTokenkey = await jwt.sign({ user: ordinaryUser }, secret, {\r\n        expiresIn: ONE_WEEK\r\n      });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'User Registered Successfully',\r\n        token: `Bearer ${jwtTokenkey}`,\r\n        user: ordinaryUser\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async loginUser(req, res) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      const user = await User.findOne({ where: { email } });\r\n      //check if user exist\r\n      if (!user) {\r\n        throw new Error('User with that email does not exist');\r\n      }\r\n      //compare password\r\n      const result = await bcrypt.compare(password, user.password);\r\n      if (!result) {\r\n        throw new Error('login information does not match our records');\r\n      }\r\n      const ordinaryUser = {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone\r\n      };\r\n      //create token and its expiration\r\n      const ONE_WEEK = 60 * 60 * 24 * 7;\r\n      const jwtTokenkey = await jwt.sign({ user: ordinaryUser }, secret, {\r\n        expiresIn: ONE_WEEK\r\n      });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Login Successfully',\r\n        token: `Bearer ${jwtTokenkey}`,\r\n        user: ordinaryUser\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n}\r\nconst UserController = new UsersController();\r\nexport default UserController;\r\n"],"file":"userController.js"}