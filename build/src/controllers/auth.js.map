{"version":3,"sources":["../../../api/src/controllers/auth.js"],"names":["AuthControllers","req","res","next","token","headers","authorization","status","json","message","jwtTokenKey","split","jwt","verify","secret","decodedToken","user","isAdmin","Error","admin","AuthController"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEMA,e;;;;;;;;;;;;+CACqBC,G,EAAKC,G,EAAKC,I;;;;;;AACjC;AACMC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;iDACIF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,qBADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;AAKT;AACMC,gBAAAA,W,GAAcN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESC,sBAAIC,MAAJ,CAAWH,WAAX,EAAwBI,YAAxB,C;;;AAArBC,gBAAAA,Y;AACNd,gBAAAA,GAAG,CAACe,IAAJ,GAAWD,YAAY,CAACC,IAAxB;AACAb,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,qBADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOeR,G,EAAKC,G,EAAKC,I;;;;;;AAC5BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;kDACIF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,qBADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;AAKHC,gBAAAA,W,GAAcN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESC,sBAAIC,MAAJ,CAAWH,WAAX,EAAwBI,YAAxB,C;;;AAArBC,gBAAAA,Y;;oBAEDA,YAAY,CAACE,O;;;;;sBACV,IAAIC,KAAJ,CAAU,eAAV,C;;;AAERjB,gBAAAA,GAAG,CAACkB,KAAJ,GAAYJ,YAAY,CAACI,KAAzB;AACAhB,gBAAAA,IAAI;kDACG,I;;;;;kDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,qBADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAQb,IAAMW,cAAc,GAAG,IAAIpB,eAAJ,EAAvB;eACeoB,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport secret from '../util/jwt';\r\n\r\nclass AuthControllers {\r\n  async verifyUserTokenKey(req, res, next) {\r\n    //check and get if token is provided from the header\r\n    const token = req.headers.authorization;\r\n    if (!token) {\r\n      return res.status(401).json({\r\n        status: 'error getting token',\r\n        message: 'No Token Provided'\r\n      });\r\n    }\r\n    // get the second index of the token\r\n    const jwtTokenKey = token.split(' ')[1];\r\n    try {\r\n      const decodedToken = await jwt.verify(jwtTokenKey, secret);\r\n      req.user = decodedToken.user;\r\n      next();\r\n      return true;\r\n    } catch (error) {\r\n      return res.status(401).json({\r\n        status: 'error getting token',\r\n        message: 'Invalid Authentication Token'\r\n      });\r\n    }\r\n  }\r\n\r\n  async verifyAdminTokenKey(req, res, next) {\r\n    const token = req.headers.authorization;\r\n    if (!token) {\r\n      return res.status(401).json({\r\n        status: 'error getting token',\r\n        message: 'No Token Provided'\r\n      });\r\n    }\r\n    const jwtTokenKey = token.split(' ')[1];\r\n    try {\r\n      const decodedToken = await jwt.verify(jwtTokenKey, secret);\r\n      //check isAdmin\r\n      if (!decodedToken.isAdmin) {\r\n        throw new Error('Access Denied');\r\n      }\r\n      req.admin = decodedToken.admin;\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      return res.status(401).json({\r\n        status: 'error getting token',\r\n        message: 'Access Denied'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst AuthController = new AuthControllers();\r\nexport default AuthController;\r\n"],"file":"auth.js"}