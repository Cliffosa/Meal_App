{"version":3,"sources":["../../../api/src/controllers/mealController.js"],"names":["MealController","req","res","body","name","price","quantity","image","files","imageUrl","Meal","create","adminId","admin","id","meal","mv","status","json","message","addedMeal","findAll","where","meals","fetchData","findOne","params","Error","mealUpdate","fs","unlink","error","update","destroy","MealsController"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport Meal from '../models/meals';\r\n\r\nclass MealController {\r\n  async createMeal(req, res) {\r\n    try {\r\n      const { name, price, quantity } = req.body;\r\n      const { image } = req.files;\r\n      const imageUrl = `/api/src/images/${image.name}`;\r\n      const meal = await Meal.create({ name, price, quantity, imageUrl, adminId: req.admin.id });\r\n      image.mv(`.${imageUrl}`);\r\n      return res.status(201).json({\r\n        status: true,\r\n        message: 'Meal Added Successfully',\r\n        addedMeal: {\r\n          id: meal.id,\r\n          name: meal.name,\r\n          price: meal.price,\r\n          quantity: meal.quantity,\r\n          imageUrl: meal.imageUrl\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: false,\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async getAllMeals(req, res) {\r\n    try {\r\n      const meals = await Meal.findAll({ where: { adminId: req.admin.id } });\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Meals Retrieved Successfully!',\r\n        fetchData: meals\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: false,\r\n        message: 'Failed to fetch Meals'\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateMeal(req, res) {\r\n    try {\r\n      const meal = await Meal.findOne({ where: { id: req.params.id } });\r\n      if (!meal) {\r\n        throw new Error(`Meal with ID ${req.params.id} does not exist, please try another ID`);\r\n      }\r\n      let name, price;\r\n      if (req.body.name) {\r\n        name = req.body.name;\r\n      } else {\r\n        name = meal.name;\r\n      }\r\n\r\n      if (req.body.name) {\r\n        price = req.body.price;\r\n      } else {\r\n        price = meal.name;\r\n      }\r\n\r\n      const mealUpdate = {\r\n        name,\r\n        price\r\n      };\r\n      if (req.files !== null) {\r\n        const { image } = req.files;\r\n        const imageUrl = `/api/src/images/${image.name}`;\r\n        fs.unlink(`.${meal.imageUrl}`, error => {\r\n          if (error) {\r\n            throw new Error(error.message);\r\n          }\r\n        });\r\n        mealUpdate.imageUrl;\r\n        await image.mv(`.${imageUrl}`);\r\n      } else {\r\n        mealUpdate.imageUrl;\r\n      }\r\n      const { imageUrl } = await mealUpdate;\r\n      await Meal.update({ name, price, imageUrl }, { where: { id: req.params.id } });\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Meal Updated Successfully!'\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: `Update was Unsuccessfull!`\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteMeal(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const meal = await Meal.findOne({ where: { id: id } });\r\n      fs.unlink(`.${meal.imageUrl}`, error => {\r\n        if (error) throw new Error(error.message);\r\n      });\r\n      await meal.destroy();\r\n      return res.status(200).json({\r\n        status: true,\r\n        message: 'Meal Deleted Successfully!'\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: false,\r\n        message: `Meal with that ${req.params.id} was unable to be deleted`\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst MealsController = new MealController();\r\nexport default MealsController;\r\n"],"file":"mealController.js"}