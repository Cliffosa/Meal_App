{"version":3,"sources":["../../../api/src/controllers/adminController.js"],"names":["AdminControllers","req","res","body","name","email","phone","password","Admin","findOne","where","existAdmin","Error","bcrypt","hash","create","admin","ordinaryAdmin","id","ONE_WEEK","jwt","sign","isAdmin","secret","expiresIn","jwtTokenKey","status","json","message","token","compare","result","AdminController"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport Admin from '../models/admin';\r\nimport secret from '../util/jwt';\r\n\r\nclass AdminControllers {\r\n  async registerAdmin(req, res) {\r\n    try {\r\n      const { name, email, phone, password } = req.body;\r\n      const existAdmin = await Admin.findOne({ where: { email } });\r\n      //check if user exist\r\n      if (existAdmin) {\r\n        throw new Error('Admin with that email Already exist');\r\n      }\r\n      const hash = await bcrypt.hash(password, 10);\r\n      const admin = await Admin.create({\r\n        name,\r\n        email,\r\n        phone,\r\n        password: hash\r\n      });\r\n      const ordinaryAdmin = {\r\n        id: admin.id,\r\n        name: admin.name,\r\n        email: admin.email,\r\n        phone: admin.phone\r\n      };\r\n      const ONE_WEEK = 60 * 60 * 24 * 7;\r\n      const jwtTokenKey = await jwt.sign(\r\n        {\r\n          admin: ordinaryAdmin,\r\n          isAdmin: true\r\n        },\r\n        secret,\r\n        {\r\n          expiresIn: ONE_WEEK\r\n        }\r\n      );\r\n      return res.status(201).json({\r\n        status: 'success ',\r\n        message: 'Register Successfully',\r\n        token: `Bearer ${jwtTokenKey}`,\r\n        admin: ordinaryAdmin\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: false,\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n  async loginAdmin(req, res) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      const admin = await Admin.findOne({ where: { email } });\r\n      if (!admin) {\r\n        throw new Error('Admin with that email does not macth our record or exist');\r\n      }\r\n      const result = await bcrypt.compare(password, admin.password);\r\n      if (!result) {\r\n        throw new Error('Log In Information does not match our records');\r\n      }\r\n      const ordinaryAdmin = {\r\n        id: admin.id,\r\n        name: admin.name,\r\n        email: admin.email,\r\n        phone: admin.phone\r\n      };\r\n      const ONE_WEEK = 60 * 60 * 24 * 7;\r\n      const jwtTokenKey = await jwt.sign(\r\n        {\r\n          admin: ordinaryAdmin,\r\n          isAdmin: true\r\n        },\r\n        secret,\r\n        {\r\n          expiresIn: ONE_WEEK\r\n        }\r\n      );\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Welcome admin, Logged In Successfully',\r\n        token: `Bearer ${jwtTokenKey}`,\r\n        admin: ordinaryAdmin\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: error.message\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst AdminController = new AdminControllers();\r\nexport default AdminController;\r\n"],"file":"adminController.js"}