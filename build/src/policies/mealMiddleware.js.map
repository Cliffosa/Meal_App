{"version":3,"sources":["../../../api/src/policies/mealMiddleware.js"],"names":["MealsMiddleware","req","res","next","schema","mealId","Joi","number","required","quantity","min","validate","body","details","undefined","message","String","status","json","type","name","string","price","rq","files","Error","allowedImages","includes","image","mimetype","erroreerrorrr","MealMiddleware"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\nclass MealsMiddleware {\r\n  async validateAddMealToMenu(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        mealId: Joi.number().required(),\r\n        quantity: Joi.number()\r\n          .min(1)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      next();\r\n      return true;\r\n    } catch (error) {\r\n      let message;\r\n      if (error.details !== undefined) {\r\n        message = String(error.details[0].message);\r\n      } else {\r\n        message = String(error.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: false,\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n\r\n  async validateAddMeal(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string().required(),\r\n        price: Joi.number()\r\n          .min(1)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      if (rq.files === null) {\r\n        throw new Error(`Meal Image Is Required!`);\r\n      }\r\n      const allowedImages = ['image/jpg', 'image/png', 'image/jpeg'];\r\n      if (!allowedImages.includes(req.files.image.mimetype)) {\r\n        throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n      }\r\n      next();\r\n      return true;\r\n    } catch (error) {\r\n      let message;\r\n      if (error.details !== undefined) {\r\n        message = String(error.details[0].message);\r\n      } else {\r\n        message = String(error.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: false,\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n\r\n  async validateUpdateMeal(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string().required(),\r\n        price: Joi.number()\r\n          .min(1)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      if (req.files !== null) {\r\n        const allowedImages = ['image/jpg', 'image/png', 'image/jpeg'];\r\n        if (!allowedImages.includes(req.files.image.mimetype)) {\r\n          throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n        }\r\n      }\r\n      next();\r\n      return true;\r\n    } catch (error) {\r\n      let message;\r\n      if (error.details !== undefined) {\r\n        message = String(erroreerrorrr.details[0].message);\r\n      } else {\r\n        message = String(error.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: false,\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst MealMiddleware = new MealsMiddleware();\r\nexport default MealMiddleware;\r\n"],"file":"mealMiddleware.js"}