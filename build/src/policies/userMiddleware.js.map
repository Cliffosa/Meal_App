{"version":3,"sources":["../../../api/src/policies/userMiddleware.js"],"names":["UsersMiddleware","req","res","next","schema","name","Joi","string","required","email","phone","number","min","password","regex","RegExp","validate","body","error","details","context","key","status","send","json","message","String","type","UserMiddleware"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\nclass UsersMiddleware {\r\n  async validateRegister(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string().required(),\r\n        email: Joi.string()\r\n          .email()\r\n          .required(),\r\n        phone: Joi.number()\r\n          .min(11)\r\n          .required(),\r\n        password: Joi.string()\r\n          .regex(new RegExp('^[a-zA-Z0-9]{8,32}$'))\r\n          .required()\r\n      };\r\n      const { error } = await Joi.validate(req.body, schema);\r\n      if (error) {\r\n        switch (error.details[0].context.key) {\r\n          case 'email':\r\n            res.status(400).send({\r\n              error: 'You must provide a valid email address'\r\n            });\r\n            break;\r\n          case 'password':\r\n            res.status(400).send({\r\n              error: `The password provided failed to match the following rules:\r\n              <br>\r\n              1. It must contain ONLY the following characters: lower case, upper case, numerics.\r\n              <br>\r\n              2. It must be at least 8 characters in length and not greater than 32 characters in length.\r\n            `\r\n            });\r\n            break;\r\n          default:\r\n            res.status(400).send({\r\n              error: 'Invalid registration information'\r\n            });\r\n        }\r\n      } else {\r\n        next();\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message: String(error.details[0].message),\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n\r\n  async validateLogin(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        email: Joi.string()\r\n          .email()\r\n          .required(),\r\n        password: Joi.string()\r\n          .regex(new RegExp('^[a-zA-Z0-9]{8,32}$'))\r\n          .required()\r\n      };\r\n      const { error } = await Joi.validate(req.body, schema);\r\n\r\n      if (error) {\r\n        switch (error.details[0].context.key) {\r\n          case 'email':\r\n            res.status(400).send({\r\n              error: 'You must provide a valid email address'\r\n            });\r\n            break;\r\n          case 'password':\r\n            res.status(400).send({\r\n              error: `The password provided failed to match the following rules:\r\n              <br>\r\n              1. It must contain ONLY the following characters: lower case, upper case, numerics.\r\n              <br>\r\n              2. It must be at least 8 characters in length and not greater than 32 characters in length.\r\n            `\r\n            });\r\n            break;\r\n          default:\r\n            res.status(400).send({\r\n              error: 'Invalid Login information'\r\n            });\r\n        }\r\n      } else {\r\n        next();\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message: String(error.details[0].message),\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst UserMiddleware = new UsersMiddleware();\r\nexport default UserMiddleware;\r\n"],"file":"userMiddleware.js"}